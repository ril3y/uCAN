[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "can-tui-monitor"
version = "1.0.0"
description = "A universal Terminal User Interface for monitoring and controlling CAN bus devices"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "CAN TUI Monitor Project", email = "info@can-tui-monitor.dev"},
]
keywords = ["can", "canbus", "automotive", "monitoring", "tui", "terminal", "serial", "usb"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Embedded Systems",
    "Topic :: System :: Hardware",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Networking",
    "Topic :: Terminals",
    "Topic :: Utilities",
]

dependencies = [
    "textual>=0.40.0",
    "rich>=13.0.0",
    "pyserial>=3.5",
    "pyperclip>=1.8.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "isort>=5.10.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/can-tui-monitor"
Repository = "https://github.com/yourusername/can-tui-monitor"
Documentation = "https://github.com/yourusername/can-tui-monitor#readme"
"Bug Tracker" = "https://github.com/yourusername/can-tui-monitor/issues"

[project.scripts]
can-tui = "can_tui.cli:main"
can-monitor = "can_tui.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["can_tui*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
can_tui = ["*.css", "*.md", "config/*.yaml", "config/*.yml"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=can_tui",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=70",
    "-v"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["can_tui"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]