; PlatformIO Project Configuration File - UCAN USB-to-CAN Bridge
;
; Multi-platform support for various CAN-enabled microcontroller boards
; 
; Supported platforms:
; - Raspberry Pi Pico (RP2040) with external CAN transceiver
; - Adafruit Feather M4 CAN (SAMD51 with built-in CAN)
;
; Build commands:
; pio run -e pico                    # Build for Raspberry Pi Pico
; pio run -e feather_m4_can          # Build for Adafruit Feather M4 CAN
; pio run -e pico --target upload    # Upload to Pico
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = pico

[env]
; Common settings for all environments
framework = arduino
monitor_speed = 115200
monitor_filters = 
    default
    time
build_flags = 
    -D FIRMWARE_VERSION=\"1.0.0\"
    -D PROTOCOL_VERSION=\"1.0\"
    -std=c++17

; Source filter to include HAL and capabilities/actions
build_src_filter =
    +<*>
    +<hal/>
    +<capabilities/>
    +<actions/>
    +<boards/>

; Common libraries for all platforms
lib_deps =
    bblanchon/ArduinoJson @ ^7.0.0

; ============================================================================
; Raspberry Pi Pico (RP2040) with external MCP2551 CAN transceiver
; ============================================================================
[env:pico]
platform          = https://github.com/maxgerhardt/platform-raspberrypi.git
board             = pico
board_build.core  = earlephilhower      ; uses the stock Pico-SDK â†’ avoids struct conflicts
upload_protocol   = picotool            ; fast UF2 upload

; Platform-specific build flags
build_flags =
    ${env.build_flags}
    -D PLATFORM_RP2040
    -D ARDUINO_RASPBERRY_PI_PICO

; Exclude SAMD51-specific files
build_src_filter =
    +<*>
    -<capabilities/samd51/>
    -<capabilities/samd51_*>
    -<hal/samd51_*>

; CAN implementation using ACAN2040 for now (will need direct can2040 later)
lib_deps =
    ${env.lib_deps}
    https://github.com/obdevel/ACAN2040.git#main

; ============================================================================
; Raspberry Pi Pico with Heartbeat - sends periodic CAN messages for testing
; ============================================================================
[env:pico_heartbeat]
extends = env:pico
build_flags =
    ${env:pico.build_flags}
    -D ENABLE_HEARTBEAT

; ============================================================================
; Raspberry Pi Pico Golf Cart Simulator - simulates golf cart CAN bus
; ============================================================================
[env:pico_golf_simulator]
extends = env:pico
build_flags =
    ${env:pico.build_flags}
    -D HAS_DEFAULT_CONFIG
build_src_filter =
    ${env:pico.build_src_filter}
    +<configs/>

; ============================================================================
; Adafruit Feather M4 CAN (SAMD51 with built-in CAN peripheral)
; ============================================================================
[env:feather_m4_can]
platform = atmelsam
board = adafruit_feather_m4_can
framework = arduino

; Platform-specific build flags
build_flags =
    ${env.build_flags}
    -D PLATFORM_SAMD51
    -D ARDUINO_ADAFRUIT_FEATHER_M4_CAN
    -D ARDUINO_USB_MODE=0  ; Use Arduino USB stack, not TinyUSB
    -D DEFAULT_CAN_BITRATE=500000  ; 500 kbps default

; Exclude RP2040-specific files
build_src_filter =
    +<*>
    -<capabilities/rp2040/>
    -<capabilities/rp2040_*>
    -<hal/rp2040_*>

; Use Adafruit CAN library for SAMD51 and NeoPixel for visual feedback
lib_deps =
    ${env.lib_deps}
    adafruit/CAN Adafruit Fork @ ^1.2.1
    adafruit/Adafruit NeoPixel @ ^1.11.0
    adafruit/Adafruit SPIFlash @ ^4.0.0

; Ignore problematic TinyUSB library
lib_ignore =
    Adafruit TinyUSB Library

; Generate UF2 file for easy drag-and-drop flashing
extra_scripts = post:scripts/generate_uf2.py

; ============================================================================
; Adafruit Feather M4 CAN - Debug Build
; ============================================================================
[env:feather_m4_can_debug]
extends = env:feather_m4_can
build_type = debug
build_flags =
    ${env:feather_m4_can.build_flags}
    -D DEBUG_SERIAL
    -D DEBUG_CAN
    -g
    -Og  ; Optimize for debugging

; ============================================================================
; Adafruit Feather M4 CAN - 250kbps
; ============================================================================
[env:feather_m4_can_250k]
extends = env:feather_m4_can
build_flags =
    ${env.build_flags}
    -D PLATFORM_SAMD51
    -D ARDUINO_ADAFRUIT_FEATHER_M4_CAN
    -D ARDUINO_USB_MODE=0
    -D DEFAULT_CAN_BITRATE=250000

; ============================================================================
; Adafruit Feather M4 CAN - 1Mbps
; ============================================================================
[env:feather_m4_can_1m]
extends = env:feather_m4_can
build_flags =
    ${env.build_flags}
    -D PLATFORM_SAMD51
    -D ARDUINO_ADAFRUIT_FEATHER_M4_CAN
    -D ARDUINO_USB_MODE=0
    -D DEFAULT_CAN_BITRATE=1000000

; ============================================================================
; Adafruit Feather M4 CAN - No NeoPixel (lower power)
; ============================================================================
[env:feather_m4_can_no_neopixel]
extends = env:feather_m4_can
build_flags =
    ${env.build_flags}
    -D PLATFORM_SAMD51
    -D ARDUINO_ADAFRUIT_FEATHER_M4_CAN
    -D ARDUINO_USB_MODE=0
    -D DEFAULT_CAN_BITRATE=500000
    -D DISABLE_NEOPIXEL  ; Disable NeoPixel for power savings

; ============================================================================
; ESP32 with TWAI (hardware CAN controller)
; ============================================================================
[env:esp32]
platform = espressif32@6.5.0
board = esp32dev
framework = arduino
monitor_speed = 115200

build_flags =
    ${env.build_flags}
    -D PLATFORM_ESP32
    -D ARDUINO_ARCH_ESP32
    -D DEFAULT_CAN_BITRATE=500000

; Exclude non-ESP32 platform files
build_src_filter =
    +<*>
    -<capabilities/rp2040/>
    -<capabilities/samd51/>
    -<hal/rp2040_*>
    -<hal/samd51_*>

; ESP32 uses built-in TWAI driver (no external CAN library needed)
; Add NeoPixel and Preferences for boards that need them
lib_deps =
    ${env.lib_deps}
    adafruit/Adafruit NeoPixel @ ^1.11.0

; ============================================================================
; LilyGo T-CAN485 (ESP32 + CAN + RS485 + WS2812 + SD)
; ============================================================================
[env:esp32_t_can485]
extends = env:esp32
board = esp32dev

build_flags =
    ${env:esp32.build_flags}
    -D BOARD_T_CAN485
    -D BOARD_HAS_NEOPIXEL
    -D BOARD_HAS_SD_CARD
    -D BOARD_HAS_RS485

; Only include t_can485 board implementation
build_src_filter =
    ${env:esp32.build_src_filter}
    -<boards/t_panel/>
    -<boards/rpi_pico/>
    -<boards/feather_m4_can/>

; ============================================================================
; LilyGo T-Panel (ESP32-S3 + 480x480 touchscreen + optional CAN/RS485)
; ============================================================================
[env:esp32_t_panel]
platform = espressif32@6.5.0
board = esp32-s3-devkitc-1
framework = arduino
monitor_speed = 115200

build_flags =
    ${env.build_flags}
    -D PLATFORM_ESP32
    -D ARDUINO_ARCH_ESP32
    -D BOARD_T_PANEL
    -D BOARD_HAS_DISPLAY
    -D BOARD_HAS_TOUCHSCREEN
    -D BOARD_HAS_SD_CARD
    -D DEFAULT_CAN_BITRATE=500000
    -D ARDUINO_USB_CDC_ON_BOOT=1  ; Enable USB CDC
    -D ARDUINO_USB_MODE=1

; Exclude non-ESP32 platform files and other board implementations
build_src_filter =
    +<*>
    -<capabilities/rp2040/>
    -<capabilities/samd51/>
    -<hal/rp2040_*>
    -<hal/samd51_*>
    -<boards/t_can485/>
    -<boards/rpi_pico/>
    -<boards/feather_m4_can/>

lib_deps =
    ${env.lib_deps}
    adafruit/Adafruit NeoPixel @ ^1.11.0

; ============================================================================
; STM32 with built-in CAN peripheral (future support)  
; ============================================================================
[env:stm32]
platform = ststm32
board = bluepill_f103c8
framework = arduino

build_flags = 
    ${env.build_flags}
    -D PLATFORM_STM32

lib_deps = 
    stm32duino/STM32duino CAN @ ^1.2.0