; PlatformIO Project Configuration File - UCAN USB-to-CAN Bridge
;
; Multi-platform support for various CAN-enabled microcontroller boards
; 
; Supported platforms:
; - Raspberry Pi Pico (RP2040) with external CAN transceiver
; - Adafruit Feather M4 CAN (SAMD51 with built-in CAN)
;
; Build commands:
; pio run -e pico                    # Build for Raspberry Pi Pico
; pio run -e feather_m4_can          # Build for Adafruit Feather M4 CAN
; pio run -e pico --target upload    # Upload to Pico
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = pico

[env]
; Common settings for all environments
framework = arduino
monitor_speed = 115200
monitor_filters = 
    default
    time
build_flags = 
    -D FIRMWARE_VERSION=\"1.0.0\"
    -D PROTOCOL_VERSION=\"1.0\"
    -std=c++17

; Source filter to include HAL
build_src_filter = 
    +<*>
    +<hal/>

; ============================================================================
; Raspberry Pi Pico (RP2040) with external MCP2551 CAN transceiver
; ============================================================================
[env:pico]
platform          = https://github.com/maxgerhardt/platform-raspberrypi.git
board             = pico
board_build.core  = earlephilhower      ; uses the stock Pico-SDK → avoids struct conflicts
upload_protocol   = picotool            ; fast UF2 upload

; Platform-specific build flags
build_flags = 
    ${env.build_flags}
    -D PLATFORM_RP2040
    -D ARDUINO_RASPBERRY_PI_PICO

; CAN implementation using ACAN2040 for now (will need direct can2040 later)
lib_deps = 
    https://github.com/obdevel/ACAN2040.git#main

; make sure the pioasm tool is present (Linux 64-bit URL shown)
platform_packages =
    tool-pioasm-rp2040-earlephilhower @ https://github.com/earlephilhower/pico-quick-toolchain/releases/download/4.0.1/x86_64-linux-gnu.pioasm-efe2103.240929.tar.gz

; run a pre-build script that assembles *.pio → *.h
extra_scripts     = pre:scripts/pioasm.py

; ============================================================================
; Adafruit Feather M4 CAN (SAMD51 with built-in CAN peripheral)
; ============================================================================
[env:feather_m4_can]
platform = atmelsam
board = adafruit_feather_m4_can
framework = arduino

; Platform-specific build flags
build_flags = 
    ${env.build_flags}
    -D PLATFORM_SAMD51
    -D ARDUINO_ADAFRUIT_FEATHER_M4_CAN
    -D ARDUINO_USB_MODE=0  ; Use Arduino USB stack, not TinyUSB

; Use Adafruit CAN library for SAMD51 and NeoPixel for visual feedback
lib_deps = 
    adafruit/CAN Adafruit Fork @ ^1.2.1
    adafruit/Adafruit NeoPixel @ ^1.11.0

; Ignore problematic TinyUSB library
lib_ignore = 
    Adafruit TinyUSB Library

; ============================================================================
; ESP32 with external CAN transceiver (future support)
; ============================================================================
[env:esp32]
platform = espressif32
board = esp32dev
framework = arduino

build_flags = 
    ${env.build_flags}
    -D PLATFORM_ESP32

lib_deps = 
    sandeepmistry/CAN @ ^0.3.1

; ============================================================================
; STM32 with built-in CAN peripheral (future support)  
; ============================================================================
[env:stm32]
platform = ststm32
board = bluepill_f103c8
framework = arduino

build_flags = 
    ${env.build_flags}
    -D PLATFORM_STM32

lib_deps = 
    stm32duino/STM32duino CAN @ ^1.2.0